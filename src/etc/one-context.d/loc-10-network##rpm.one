#!/usr/bin/env bash

# -------------------------------------------------------------------------- #
# Copyright 2010-2016, OpenNebula Systems                                    #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

. $(dirname $0)/lib-one-context.sh

if ! context_changed 'ETH[0-9]*' ; then
    exit 0
fi

# Gets IP address from a given MAC
mac2ip() {
    mac=$1

    let ip_a=0x`echo $mac | cut -d: -f 3`
    let ip_b=0x`echo $mac | cut -d: -f 4`
    let ip_c=0x`echo $mac | cut -d: -f 5`
    let ip_d=0x`echo $mac | cut -d: -f 6`

    ip="$ip_a.$ip_b.$ip_c.$ip_d"
    echo $ip
}

is_gateway() {
    if [ -z "$GATEWAY_IFACE_NUM" ]; then
        true
    else
        [ "$IFACE_INDEX" = "$GATEWAY_IFACE_NUM" ]
    fi
}

# Gets the network gateway
get_gateway() {
    if is_gateway; then
        gateway=$(get_iface_var "GATEWAY")

        echo $gateway
    fi
}

get_iface_var() {
    var_name="${UPCASE_DEV}_$1"
    echo ${!var_name}
}


get_interface_mac()
{
    MAC_LIST=$(
        ip link show | awk '/^[0-9]+: [A-Za-z0-9@]+:/ { device=$2; gsub(/:/, "",device); split(device,dev,"@")} /link\/ether/ { print dev[1]  " " $2 }'
    )
}

get_changed_interfaces()
{
    for v in "${CHANGED_VARS[@]}" ; do
        echo "$v"
    done | grep -E "^ETH[0-9]+_" | egrep -v '^ETH[0-9]+_ALIAS' \
	    | cut -d _ -f 1 | sort | uniq
}

get_interface_alias()
{
    for v in "${CHANGED_VARS[@]}" ; do
        echo "$v"
    done | grep -E "^ETH${INDEX}_ALIAS[0-9]+_" | cut -d _ -f 2 | sort | uniq
}

get_deleted_interfaces()
{
    for v in "${DELETED_VARS[@]}" ; do
        echo "$v"
    done | grep -E "^ETH[0-9]+_MAC" | cut -d _ -f 1 | sort | uniq
}

get_deleted_aliases()
{
    for v in "${DELETED_VARS[@]}" ; do
        echo "$v"
    done | grep -E "^ETH[0-9]+_ALIAS[0-9]+_IP" | cut -d _ -f 1,2 | sort | uniq
}

get_dev()
{
    local mac="$1"
    echo "$MAC_LIST" | grep "$mac" | cut -d' ' -f1 | tail -n1
}


add_or_replace(){
	local file="$1"
	local attr="$2"
	local value="$3"

	if egrep "^${attr}=" "$file" ; then
		sed -i "s/^${attr}=.*/${attr}=${value}/" "$file"
	else
		echo "${attr}=${value}" >> "$file"
	fi

}

delete_interface(){
	IFACE="$1"

	IF_INDEX=${IFACE#ETH}
	UPCASE_DEV="$IFACE"
	MAC=$(get_iface_var "MAC")
	DEV=$(get_dev "$MAC")
        [ -z "${DEV}" ] && return 1

	ifdown "$DEV"
	CFG_FILE="$CONFIG_PATH/ifcfg-${DEV}"
	rm -f "${CFG_FILE}"
}

delete_alias(){
	IFACE="$1"
	ALIAS="$2"

	IF_INDEX=${IFACE#ETH}
	ALIAS_INDEX="${ALIAS#ALIAS}"
	UPCASE_DEV="$IFACE"
	MAC=$(get_iface_var "MAC")
	DEV=$(get_dev "$MAC")
        [ -z "${DEV}" ] && return 1

	CFG_FILE="$CONFIG_PATH/ifcfg-${DEV}:${ALIAS_INDEX}"
	rm -f "${CFG_FILE}"
}

set_interface(){
	IFACE="$1"
	IF_INDEX=${IFACE#ETH}
	UPCASE_DEV="$IFACE"
	MAC=$(get_iface_var "MAC")
	DEV=$(get_dev "$MAC")

        [ -z "${DEV}" ] && return 1

	CFG_FILE="$CONFIG_PATH/ifcfg-$DEV"
	if ! [ -f "$CFG_FILE" ] ; then
		cat << EOT > $CFG_FILE
DEVICE=$DEV
BOOTPROTO=none
NM_CONTROLLED=no
TYPE=Ethernet
ONBOOT=yes
EOT
	fi
	for v in "${CHANGED_VARS[@]}" ; do
		case "$v" in
			"${IFACE}_IP" )
				IP=$(get_iface_var "IP")
				add_or_replace "$CFG_FILE" "IPADDR" "${IP}"
				;;
			"${IFACE}_MASK" )
				MASK=$(get_iface_var "MASK")
				add_or_replace "$CFG_FILE" "NETMASK" "${MASK}"
				;;
			"${IFACE}_GATEWAY" )
				GATEWAY=$(get_gateway)
				add_or_replace "$CFG_FILE" "GATEWAY" "${GATEWAY}"
				;;
			"${IFACE}_MTU" )
				MTU=$(get_iface_var "MTU")
				add_or_replace "$CFG_FILE" "MTU" "${MTU}"
				;;
		esac
	done

}

set_alias(){
	IFACE="$1"
	ALIAS="$2"
	IFALIAS="${IFACE}_${ALIAS}"

	IF_INDEX=${IFACE#ETH}
	UPCASE_DEV="$IFACE"
	MAC=$(get_iface_var "MAC")
	DEV=$(get_dev "$MAC")

        [ -z "${DEV}" ] && return 1

	ALIAS_INDEX="${ALIAS#ALIAS}"
	CFG_FILE="$CONFIG_PATH/ifcfg-${DEV}:${ALIAS_INDEX}"

	UPCASE_DEV="${IFALIAS}"
	IP=$(get_iface_var "IP")
	MASK=$(get_iface_var "MASK")
	if ! [ -f "$CFG_FILE" ] ; then
		touch "${CFG_FILE}"
	fi

	for v in "${CHANGED_VARS[@]}" ; do
		case "$v" in
			"${IFALIAS}_IP" )
				IP=$(get_iface_var "IP")
				add_or_replace "$CFG_FILE" "IPADDR" "${IP}"
				;;
			"${IFALIAS}_MASK" )
				MASK=$(get_iface_var "MASK")
				add_or_replace "$CFG_FILE" "NETMASK" "${MASK}"
				;;
		esac
	done

}


##################################

# delete aliases
RECONFIGURED_DEV=()
get_deleted_aliases | while IFS=_ read if_name alias ; do
	delete_alias "$if_name" "$alias"
	RECONFIGURED_DEV+=("$DEV")
done
for d in $(echo ${RECONFIGURED_DEV[@]} | tr ' ' '\n' | sort | uniq ) ; do
	ifup $d
done

# delete interfaces
get_deleted_interfaces | while read if_name ; do
	delete_interface "$if_name"
done

# add interfaces
RECONFIGURED_DEV=()
get_changed_interfaces | while read if_name ; do
	set_interface "$if_name"
	RECONFIGURED_DEV+=($DEV)
	INDEX=${ifname#ETH}
	for alias in $(get_interface_alias) ; do
		set_alias "$if_name" "$alias"
	done
done

